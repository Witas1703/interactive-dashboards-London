round(a, 2)
install.packages("corrplot")
names(patient_last_results)
library(corrplot)
a = cor(patient_last_results[8:81], method = "pearson", use = "complete.obs")
round(a, 2)
corrplot(a, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# names(patient_last_results)
library(corrplot)
a = cor(patient_last_results[8:81], method = "pearson", use = "complete.obs")
round(a, 2)
corrplot(a, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
cor(patient_last_results[8:81], method = "pearson", use = "complete.obs")
# names(patient_last_results)
library(corrplot)
a = cor(patient_last_results[8:81], method = "pearson", use = "complete.obs")
corrplot(a, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# names(patient_last_results)
library(corrplot)
a = cor(na.omit(patient_last_results[8:81]), method = "pearson", use = "complete.obs")
corrplot(a, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corMat = cor(patient_last_results)
corMat = cor(patient_last_results[8:81])
# names(patient_last_results)
library(corrplot)
corMat = cor(patient_last_results[8:81])
corrplot(corMat)
# names(patient_last_results)
library(corrplot)
corMat = cor(patient_last_results[8:81])
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = corMat, col = palette, symm = TRUE)
# names(patient_last_results)
library(corrplot)
corMat = cor(patient_last_results[8:81])
corrplot(corMat)
# names(patient_last_results)
library(corrplot)
corMat = cor(patient_last_results[8:81])
plot.new()
corrplot(corMat)
# names(patient_last_results)
library(corrplot)
corMat = cor(patient_last_results[8:81])
plot.new(corrplot(corMat))
View(corMat)
View(corMat)
# names(patient_last_results)
library(corrplot)
corMat = cor(na.omit(patient_last_results[8:81]))
plot.new()
corrplot(corMat)
View(corMat)
View(corMat)
View(corMat)
filter(corMat, > 0.7)
# names(patient_last_results)
library(corrplot)
corMat = cor(na.omit(patient_last_results[8:10]))
corrplot(corMat)
corMat = cor(na.omit(patient_last_results[8:20]))
corrplot(corMat)
corrplot(corMat, type = "upper")
corMat = cor(na.omit(patient_last_results[8:81]))
corrplot(corMat, type = "upper")
corrplot(corMat, type = "upper", order = "hclust")
corMat = cor(na.omit(patient_last_results[8:30]))
corrplot(corMat, type = "upper", tl.col="black", tl.srt=45)
corMat = cor(na.omit(patient_last_results[8:20]))
corrplot(corMat, type = "upper", tl.col="black", tl.srt=45)
# names(patient_last_results)
library(corrplot)
corMat = cor(na.omit(patient_last_results[8:20]))
plot(1:10)
dev.new(width=5, height=4)
plot(1:20)
corrplot(corMat, type = "upper", tl.col="black", tl.srt=45)
# names(patient_last_results)
library(corrplot)
corMat = cor(na.omit(patient_last_results[8:81]))
plot(1:10)
dev.new(width=5, height=4)
plot(1:20)
corrplot(corMat, type = "upper", tl.col="black", tl.srt=45)
# names(patient_last_results)
library(corrplot)
corMat = cor(na.omit(patient_last_results[8:50]))
plot(1:10)
dev.new(width=5, height=4)
plot(1:20)
corrplot(corMat, type = "upper", tl.col="black", tl.srt=45)
# names(patient_last_results)
cor(patient_last_results) %>%
as.data.frame() %>%
mutate(var1 = rownames(.)) %>%
gather(var2, value, -var1) %>%
arrange(desc(value))
# names(patient_last_results)
cor(patient_last_results[8:81]) %>%
as.data.frame() %>%
mutate(var1 = rownames(.)) %>%
gather(var2, value, -var1) %>%
arrange(desc(value))
# names(patient_last_results)
cor(na.omit(patient_last_results[8:81]))%>%
as.data.frame() %>%
mutate(var1 = rownames(.)) %>%
gather(var2, value, -var1) %>%
arrange(desc(value))
biggestCorrelation < 1
# names(patient_last_results)
biggestCorrelation = cor(na.omit(patient_last_results[8:81]))%>%
as.data.frame() %>%
mutate(var1 = rownames(.)) %>%
gather(var2, value, -var1) %>%
arrange(desc(value))
biggestCorrelation < 1
biggestCorrelation
filter(biggestCorrelation, value < 1)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
# library(ggExtra)
library(stringr)
wuhan = read_excel("wuhan_data.xlsx")
for(i in 1:nrow(wuhan)){
if(!is.na(wuhan[i,1])){
patient = wuhan[i,1]
}
else{
wuhan[i,1] = patient
}
}
wuhan <- wuhan %>%
mutate(across("gender", ~factor(., levels=c(1,2), labels=c("male", "female")))) %>%
mutate(across("outcome", ~factor(., levels=c(0,1), labels=c("recovered","deceased"))))
patient_last_results <- wuhan %>%
group_by(PATIENT_ID) %>%
fill(everything()) %>%
summarise_all(last) %>%
rowwise() %>%
rename_with(~str_replace_all(.x, "[ |-]", "_")) %>%
rename_with(~str_c(str_replace(.x, "\\(%\\)", ""), "_percent"), contains("(%)"))
names(patient_last_results)
biggestCorrelation = cor(na.omit(patient_last_results[8:81]))%>%
as.data.frame() %>%
mutate(var1 = rownames(.)) %>%
gather(var2, value, -var1) %>%
arrange(desc(value))
filter(biggestCorrelation, value < 1)
ggplot(patient_last_results, aes(age, albumin, color = outcome)) +
geom_jitter() +
geom_rug(col=rgb(.5,0,0,alpha=.2)) +
theme_classic()
ggplot(patient_last_results, aes(D_D_dimer, Fibrin_degradation_products, color =  fibrinogen)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(International_standard_ratio, Prothrombin_time, color =  outcome)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(International_standard_ratio, Prothrombin_time, color =  Hypersensitive_cardiac_troponinI)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
```{r, message = F}
biggestCorrelation = cor(na.omit(patient_last_results[8:81]))%>%
as.data.frame() %>%
mutate(var1 = rownames(.)) %>%
gather(var2, value, -var1) %>%
arrange(desc(value))
filter(biggestCorrelation, value < 1)
biggestCorrelation = cor(na.omit(patient_last_results[8:81]))%>%
as.data.frame() %>%
mutate(var1 = rownames(.)) %>%
gather(var2, value, -var1) %>%
arrange(desc(value))
filter(biggestCorrelation, value < 1)
ggplot(patient_last_results, aes(International_standard_ratio, Prothrombin_time, color =  outcome)) +
geom_point() +
# facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(High_sensitivity_C_reactive_protein, Interleukin_6, color =  outcome)) +
geom_point() +
# facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(High_sensitivity_C_reactive_protein, Interleukin_6, color =  Interleukin_1β)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(High_sensitivity_C_reactive_protein, Interleukin_1β, color =  Interleukin_6)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(High_sensitivity_C_reactive_protein, Interleukin_1β, color =  gender)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(outcome, High_sensitivity_C_reactive_protein)) +
geom_violin() +
#facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(gender, High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(gender, High_sensitivity_C_reactive_protein, color = Interleukin_6)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
install.packages("arules")
discretize(patient_last_results$age)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
# library(ggExtra)
library(stringr)
library(arules)
wuhan = read_excel("wuhan_data.xlsx")
for(i in 1:nrow(wuhan)){
if(!is.na(wuhan[i,1])){
patient = wuhan[i,1]
}
else{
wuhan[i,1] = patient
}
}
wuhan <- wuhan %>%
mutate(across("gender", ~factor(., levels=c(1,2), labels=c("male", "female")))) %>%
mutate(across("outcome", ~factor(., levels=c(0,1), labels=c("recovered","deceased"))))
patient_last_results <- wuhan %>%
group_by(PATIENT_ID) %>%
fill(everything()) %>%
summarise_all(last) %>%
rowwise() %>%
rename_with(~str_replace_all(.x, "[ |-]", "_")) %>%
rename_with(~str_c(str_replace(.x, "\\(%\\)", ""), "_percent"), contains("(%)"))
names(patient_last_results)
ggplot(patient_last_results, aes(age, albumin, color = outcome)) +
geom_jitter() +
geom_rug(col=rgb(.5,0,0,alpha=.2)) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age), High_sensitivity_C_reactive_protein)) +
geom_violin() +
# facet_wrap(~outcome) +
theme_classic()
discretize(patient_last_results$age)
ggplot(patient_last_results, aes(discretize(age), High_sensitivity_C_reactive_protein, color = outcome)) +
geom_violin() +
# facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age), High_sensitivity_C_reactive_protein, fill = outcome)) +
geom_violin() +
# facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age, method = "interval"), High_sensitivity_C_reactive_protein, fill = outcome)) +
geom_violin() +
# facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age, method = "interval", breaks = 7), High_sensitivity_C_reactive_protein, fill = outcome)) +
geom_violin() +
# facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age, method = "interval", breaks = 7), High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age, method = "interval", breaks = 8), High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age, method = "interval", breaks = 7), High_sensitivity_C_reactive_protein, color = outcome)) +
geom_violin() +
# facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(discretize(age, method = "interval", breaks = 7), High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(x = Interleukin_1β, color = discretize(age, method = "interval", breaks = 7), y = High_sensitivity_C_reactive_protein)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(x = Interleukin_6, color = discretize(age, method = "interval", breaks = 7), y = High_sensitivity_C_reactive_protein)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes(color = Interleukin_6, x = discretize(age, method = "interval", breaks = 7), y = High_sensitivity_C_reactive_protein)) +
geom_point() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval", breaks = 7), y = High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes( x= gender, y = High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes( x= gender, y = High_sensitivity_C_reactive_protein, color =  discretize(age, method = "interval", breaks = 7))) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval"), y = High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval"), y = High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome + gender) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval"), y = High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_grid(outcome ~ gender) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval", breaks = 2), y = High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_grid(outcome ~ gender) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval", breaks = 2), y = High_sensitivity_C_reactive_protein)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval", breaks = 2), y = High_sensitivity_C_reactive_protein, color = gender)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
ggplot(patient_last_results, aes( x = discretize(age, method = "interval", breaks = 2), y = High_sensitivity_C_reactive_protein, fill = gender)) +
geom_violin() +
facet_wrap(~outcome) +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
knitr::opts_chunk$set(fig.width = 12, fig.height = 8)
patient_last_results %>% as_tibble() %>% distinct() %>% mutate(age_group = cut_interval(age, n=7)) %>%
ggplot(aes(y = age_group, x = Lactate_dehydrogenase, fill = outcome)) +
geom_density_ridges(alpha = 0.5, scale = 0.99, na.rm = T) + facet_grid(.~gender) +
theme_classic() + scale_fill_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Lactate dehydrogenase", y = "Age group", title = "Distribution of lacatate dehydrogenase based on outcome and age group")  +
theme(text = element_text(size=15))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
knitr::opts_chunk$set(fig.width = 12, fig.height = 8)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(ggpubr) # better marginal plots
library(stringr)
library(arules) # discretize
library(plotly)
library(ggridges)
library(lemon)
wuhan = read_excel("wuhan_data.xlsx")
for(i in 1:nrow(wuhan)){
if(!is.na(wuhan[i,1])){
patient = wuhan[i,1]
}
else{
wuhan[i,1] = patient
}
}
wuhan <- wuhan %>%
mutate(across("gender", ~factor(., levels=c(1,2), labels=c("male", "female")))) %>%
mutate(across("outcome", ~factor(., levels=c(0,1), labels=c("recovered","deceased"))))
patient_last_results <- wuhan %>%
group_by(PATIENT_ID) %>%
fill(everything()) %>%
summarise_all(last) %>%
rowwise() %>%
rename_with(~str_replace_all(.x, "[ |-]", "_")) %>%
rename_with(~str_c(str_replace(.x, "\\(%\\)", ""), "_percent"), contains("(%)")) %>%
rename_with(~str_replace(.x, "\\(#\\)", ""))
dead_alive <-function(y, value){
result = c()
for(x in y){
if(x == value){ result = c(result, 1)}
else {result = c(result, 0)}
}
return(result)
}
data_chart1 = patient_last_results %>%
as_tibble() %>%
distinct() %>%
mutate(age_group = cut_interval(age, 7))  %>%
mutate(alive = as.numeric(dead_alive(outcome, "recovered"))) %>%
mutate(dead = as.numeric(dead_alive(outcome, "deceased"))) %>%
group_by(age_group,gender) %>%
summarize(across(alive:dead, sum)) %>%
mutate(all = alive + dead) %>%
mutate (percent_dead = round(dead/all,2)*100) %>%
mutate( "Percent of deaths in a given age group" = ifelse(test =gender == "female", yes = -percent_dead, no = percent_dead))
data_chart1 %>% ggplot(mapping = aes(x = `Percent of deaths in a given age group`, y = age_group, fill = gender)) +
labs(y = "Age group", title = "Percentage of deaths in different age groups") +
geom_col(width =  0.6) + scale_x_symmetric(labels = abs) + theme_classic() +
scale_fill_manual(values = c("#61a7d3","#f6b871"))  +
theme(text = element_text(size=15))
ggplotly(ggplot(patient_last_results, aes(age, albumin, color = outcome)) +
geom_jitter() +
geom_rug() +
theme_classic() +
scale_color_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Age", y = "Albumin", title = "Dependency of outcome based on albumin and age") +
theme(text = element_text(size=15)))
patient_last_results %>%
ggplot( mapping  = aes(y = High_sensitivity_C_reactive_protein , x = age)) +
geom_density2d_filled(aes(color = outcome), alpha = 0.5, contour_var = "ndensity", na.rm = T) +
theme_classic() + facet_grid(.~gender) +
scale_fill_viridis_d(option="inferno") +
scale_color_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Age", y = "High sensitivity C-reactive protein", title = "2D density plot of outcome based on age and high censitivity C protein") +
theme(text = element_text(size=15))
patient_last_results %>% as_tibble() %>% distinct() %>% mutate(age_group = cut_interval(age, n=7)) %>%
ggplot(aes(y = age_group, x = Lactate_dehydrogenase, fill = outcome)) +
geom_density_ridges(alpha = 0.5, scale = 0.99, na.rm = T) + facet_grid(.~gender) +
theme_classic() + scale_fill_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Lactate dehydrogenase", y = "Age group", title = "Distribution of lacatate dehydrogenase based on outcome and age group")  +
theme(text = element_text(size=15))
ggscatterhist(patient_last_results, x = "lymphocyte_percent", y = "neutrophils_percent", color = "outcome", size = 2, alpha = 0.7,
palette = c("#F5972A","#0771B4"), margin.params = list(fill = "outcome", color = "black", size = 0.2), xlab = "Lymphocyte %", ylab = "Neutrophils %",
title = "Scatterplot of outcome based on lymphocyte and neutrophils percent")
ggplot(data = subset(patient_last_results, !is.na(Fibrin_degradation_products)), aes(y = Prothrombin_activity, x = discretize(Fibrin_degradation_products), fill = outcome)) +
geom_violin() +
theme_classic() +
facet_wrap(~outcome) + scale_fill_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Fibrin degradation products", y = "Prothrombin activity [%]", title = "Distribution of outcome based on blood coagulation parameters") +
theme(text = element_text(size=15))
patient_last_results %>% as_tibble() %>% distinct() %>% mutate(age_group = cut_interval(age, n=7)) %>%
ggplot(aes(y = age_group, x = Lactate_dehydrogenase, fill = outcome)) +
geom_density_ridges(alpha = 0.5, scale = 0.99, na.rm = T) + facet_grid(.~gender) +
theme_classic() + scale_fill_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Lactate dehydrogenase", y = "Age group", title = "Distribution of lacatate dehydrogenase based on outcome and age group")  +
theme(text = element_text(size=15)) +
opts(title = "Distribution of lacatate dehydrogenase based on outcome and age group",plot.title=theme_text(size=50))
patient_last_results %>% as_tibble() %>% distinct() %>% mutate(age_group = cut_interval(age, n=7)) %>%
ggplot(aes(y = age_group, x = Lactate_dehydrogenase, fill = outcome)) +
geom_density_ridges(alpha = 0.5, scale = 0.99, na.rm = T) + facet_grid(.~gender) +
theme_classic() + scale_fill_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Lactate dehydrogenase", y = "Age group", title = "Distribution of lacatate dehydrogenase based on outcome and age group")  +
theme(text = element_text(size=15))
patient_last_results %>% as_tibble() %>% distinct() %>% mutate(age_group = cut_interval(age, n=7)) %>%
ggplot(aes(y = age_group, x = Lactate_dehydrogenase, fill = outcome)) +
geom_density_ridges(alpha = 0.5, scale = 0.99, na.rm = T) + facet_grid(.~gender) +
theme_classic() + scale_fill_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Lactate dehydrogenase", y = "Age group", title = "Distribution of lacatate dehydrogenase based on outcome \n and age group")  +
theme(text = element_text(size=15))
patient_last_results %>% as_tibble() %>% distinct() %>% mutate(age_group = cut_interval(age, n=7)) %>%
ggplot(aes(y = age_group, x = Lactate_dehydrogenase, fill = outcome)) +
geom_density_ridges(alpha = 0.5, scale = 0.99, na.rm = T) + facet_grid(.~gender) +
theme_classic() + scale_fill_manual(values = c("#F5972A","#0771B4")) +
labs(x = "Lactate dehydrogenase", y = "Age group", title = "Distribution of lacatate dehydrogenase based on outcome \nand age group")  +
theme(text = element_text(size=15))
install.packages("flexdashboard")
shiny::runApp('Studia/Semestr-4/Data Visualization/lab4_interacvite_dashboars/WT1_Nathan_Fillon')
runApp('Studia/Semestr-4/Data Visualization/lab4_interacvite_dashboars/WT1_Nathan_Fillon')
runApp('Studia/Semestr-4/Data Visualization/lab4_interacvite_dashboars/WT1_Nathan_Fillon')
runApp('Studia/Semestr-4/Data Visualization/lab4_interacvite_dashboars/WT1_Nathan_Fillon')
runApp('Studia/Semestr-4/Data Visualization/lab4_interacvite_dashboars/WT1_Nathan_Fillon')
runApp('Studia/Semestr-4/Data Visualization/lab4_interacvite_dashboars/WT1_Nathan_Fillon')
shiny::runApp('Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/code/London_Interactive_Dashboard')
install.packages("shinydashboard")
runApp('Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/code/London_Interactive_Dashboard')
setwd("~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/data")
adam = read.csv("~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/data/animal_rescue_incidents_LFB.csv")
adam
View(adam)
View(adam)
animalsRescue = read.csv("~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/data/animal_rescue_incidents_LFB.csv")
names(animalsRescue)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
type(animalsRescue)
typeof(animalsRescue)
View(animalsRescue)
View(animalsRescue)
animalsRescue = read.csv("~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/data/animal_rescue_incidents_LFB.csv")
names(animalsRescue)
typeof(animalsRescue)
animalsRescue = data.frame(animalsRescue)
typeof(animalsRescue)
animalsRescue = read.csv("~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/data/animal_rescue_incidents_LFB.csv")
names(animalsRescue)
animalsRescue = data.frame(animalsRescue)
typeof(animalsRescue)
View(animalsRescue)
animalsRescue$DateTimeOfCall
library(ggplot2)
library(dplyr)
animalsRescue = read.csv("~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/data/animal_rescue_incidents_LFB.csv")
names(animalsRescue)
animals %>% select(- c(IncidentNumber))
animalsRescue %>% select(- c(IncidentNumber))
names(animalsRescue)
animalsRescue %>% select(- c("IncidentNumber"))
names(animalsRescue)
library(dplyr)
runApp('~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/code/London_Interactive_Dashboard')
runApp('~/Studia/Semestr-4/Data Visualization/assignment4/interactive-dashboards-London/code/London_Interactive_Dashboard')
